# -*- coding: utf-8 -*-
"""A_53_ML_Prac7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P2I_AjERv7vOZt3cIc0n2LqFVMEEo9UT

Name: Prathamesh Rajbhoj

Roll no : 53

Batch : A2

Practical 07 : TO implement the backpropagation neural network for XOR gate.
"""

import numpy as np
import matplotlib.pyplot as plt

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([[0], [1], [1], [0]])

np.random.seed(42)

input_size = 2
hidden_size = 4
output_size = 1
learning_rate = 0.1
epochs = 10000

input_hidden_weights = np.random.uniform(size=(input_size, hidden_size))
hidden_output_weights = np.random.uniform(size=(hidden_size, output_size))

errors = []

for epoch in range(epochs):
    hidden_layer_input = np.dot(X, input_hidden_weights)
    hidden_layer_output = sigmoid(hidden_layer_input)
    output_layer_input = np.dot(hidden_layer_output, hidden_output_weights)
    output_layer_output = sigmoid(output_layer_input)

    error = y - output_layer_output

    errors.append(np.mean(np.abs(error)))

    delta_output = error * sigmoid_derivative(output_layer_output)
    error_hidden = delta_output.dot(hidden_output_weights.T)
    delta_hidden = error_hidden * sigmoid_derivative(hidden_layer_output)
    hidden_output_weights += hidden_layer_output.T.dot(delta_output) * learning_rate
    input_hidden_weights += X.T.dot(delta_hidden) * learning_rate
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}: Error = {np.mean(np.abs(error))}")

plt.plot(range(epochs), errors)
plt.xlabel('Epochs')
plt.ylabel('Error')
plt.title('Error Over Iterations')
plt.show()

print("Final Input-Hidden Weights:")
print(input_hidden_weights)
print("Final Hidden-Output Weights:")
print(hidden_output_weights)

print("\nTest Results:")
for i in range(len(X)):
    hidden_layer_input = np.dot(X[i], input_hidden_weights)
    hidden_layer_output = sigmoid(hidden_layer_input)
    output_layer_input = np.dot(hidden_layer_output, hidden_output_weights)
    output_layer_output = sigmoid(output_layer_input)

    print(f"Input: {X[i]} - Predicted Output: {output_layer_output[0]} - Actual Output: {y[i][0]}")